rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    //////////////////////////////////////////////////////////////////////////
    // Users
    //////////////////////////////////////////////////////////////////////////
    match /users/{userId} {
      allow create: if request.auth != null
                    && request.auth.uid == userId
                    && request.resource.data.keys().hasAll(['email','displayName','createdAt'])
                    && request.resource.data.createdAt == request.time;

      allow read:   if request.auth != null
                    && request.auth.uid == userId;

      allow update: if request.auth != null
                    && request.auth.uid == userId
                    && request.resource.data.diff(resource.data)
                       .changedKeys().hasOnly([
                         'displayName','photoURL','language','interests',
                         'proficiency','goals','isOnline','lastActive',
                         'lastStudyAt'
                       ]);

      allow delete: if false;
    }

    //////////////////////////////////////////////////////////////////////////
    // Conversations & Messages
    //////////////////////////////////////////////////////////////////////////
    match /conversations/{conversationId} {
      allow read, update: if request.auth.uid in resource.data.participants;
      allow create: if request.auth != null
                    && request.resource.data.participants is list
                    && request.auth.uid in request.resource.data.participants
                    && request.resource.data.createdAt == request.time;

      match /messages/{messageId} {
        allow read: if request.auth.uid in
          get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants;

        allow create: if request.auth.uid in
          get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants
                        && request.resource.data.senderId == request.auth.uid
                        && request.resource.data.sentAt == request.time;

        allow update, delete: if false;
      }
    }

    //////////////////////////////////////////////////////////////////////////
    // Friend Requests
    //////////////////////////////////////////////////////////////////////////
    match /friendRequests/{requestId} {
      allow create: if request.auth.uid == request.resource.data.senderId
                    && request.resource.data.createdAt == request.time;

      allow read: if request.auth.uid == resource.data.senderId
                  || request.auth.uid == resource.data.receiverId;

      allow update, delete: if request.auth.uid == resource.data.receiverId;
    }

    //////////////////////////////////////////////////////////////////////////
    // Meetings
    //////////////////////////////////////////////////////////////////////////
    match /meetings/{meetingId} {
      allow create: if request.auth.uid == request.resource.data.createdBy
                    && request.resource.data.createdAt == request.time;
      allow read:   if request.auth.uid in resource.data.participants;
      allow update, delete: if request.auth.uid == resource.data.createdBy;

      match /reminders/{reminderId} {
        allow read, create: if request.auth.uid in
          get(/databases/$(database)/documents/meetings/$(meetingId)).data.participants;
        allow update, delete: if false;
      }
    }

    //////////////////////////////////////////////////////////////////////////
    // Potential Matches (Cloud Functions only)
    //////////////////////////////////////////////////////////////////////////
    match /users/{userId}/potentialMatches/{matchId} {
      allow read: if request.auth.uid == userId;
      allow write: if false;
    }

    //////////////////////////////////////////////////////////////////////////
    // Profiles (public read)
    //////////////////////////////////////////////////////////////////////////
    match /profiles/{profileId} {
      allow read:  if true;
      allow write: if false;
    }

    //////////////////////////////////////////////////////////////////////////
    // Calendars
    //////////////////////////////////////////////////////////////////////////
    match /calendars/{calendarId} {
      allow create: if request.auth.uid == request.resource.data.ownerId
                    && request.resource.data.createdAt == request.time;
      allow read, update, delete:
        if request.auth.uid == resource.data.ownerId;
    }

    //////////////////////////////////////////////////////////////////////////
    // Penpals
    //////////////////////////////////////////////////////////////////////////
    match /penpals/{penpalId} {
      allow read, update, delete:
        if request.auth.uid in resource.data.participants;
      allow create: if request.auth.uid in request.resource.data.participants
                    && request.resource.data.createdAt == request.time;
    }

    //////////////////////////////////////////////////////////////////////////
    // Vocab Sheets & Cards
    //////////////////////////////////////////////////////////////////////////
    match /vocabSheets/{sheetId} {
      allow create: if request.auth.uid == request.resource.data.ownerId
                    && request.resource.data.createdAt == request.time;
      allow read, update, delete:
        if request.auth.uid == resource.data.ownerId;

      match /vocabCards/{cardId} {
        allow create: if request.auth.uid == resource.data.ownerId
                      && request.resource.data.createdAt == request.time;
        allow read, update, delete:
          if request.auth.uid ==
             get(/databases/$(database)/documents/vocabSheets/$(sheetId))
               .data.ownerId;
      }
    }

    //////////////////////////////////////////////////////////////////////////
    // Default Deny
    //////////////////////////////////////////////////////////////////////////
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
